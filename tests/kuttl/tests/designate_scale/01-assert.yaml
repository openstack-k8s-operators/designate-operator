apiVersion: designate.openstack.org/v1beta1
kind: Designate
metadata:
  name: designate
spec:
  databaseInstance: openstack
  databaseAccount: designate
  serviceUser: designate
  secret: osp-secret
  preserveJobs: false
  designateAPI:
    replicas: 1
  designateCentral:
    replicas: 1
  designateWorker:
    replicas: 1
  designateProducer:
    replicas: 1
  designateUnbound:
    replicas: 1
  customServiceConfig: |
    [DEFAULT]
    debug = true
status:
  designateAPIReadyCount: 1
  designateBackendbind9ReadyCount: 1
  designateCentralReadyCount: 1
  designateMdnsReadyCount: 1
  designateProducerReadyCount: 1
  designateUnboundReadyCount: 1
  designateWorkerReadyCount: 1
  databaseHostname: openstack.designate-kuttl-tests.svc
  conditions:
  - message: Setup complete
    reason: Ready
    status: "True"
    type: Ready
  - message: DB create completed
    reason: Ready
    status: "True"
    type: DBReady
  - message: DBsync completed
    reason: Ready
    status: "True"
    type: DBSyncReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateAPIReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateBackendbind9Ready
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateCentralReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateMdnsReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateProducerReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateUnboundReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: DesignateWorkerReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: InputReady
  - message: MariaDBAccount creation complete
    reason: Ready
    status: "True"
    type: MariaDBAccountReady
  - message: NetworkAttachments completed
    reason: Ready
    status: "True"
    type: NetworkAttachmentsReady
  - message: RabbitMqTransportURL successfully created
    reason: Ready
    status: "True"
    type: RabbitMqTransportURLReady
  - message: RoleBinding created
    reason: Ready
    status: "True"
    type: RoleBindingReady
  - message: Role created
    reason: Ready
    status: "True"
    type: RoleReady
  - message: ServiceAccount created
    reason: Ready
    status: "True"
    type: ServiceAccountReady
  - message: Service config create completed
    reason: Ready
    status: "True"
    type: ServiceConfigReady

---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: internal
    service: designate
  name: designate-internal
spec:
  ports:
    - name: designate-internal
  selector:
    service: designate
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: public
    service: designate
  name: designate-public
spec:
  ports:
    - name: designate-public
  selector:
    service: designate
  type: ClusterIP
---
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment designate-operator-controller-manager -o go-template="$tupleTemplate")
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE_DESIGNATE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_DESIGNATE_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          case $NAME in
            API)
              template='{{.spec.designateAPI.containerImage}}'
              ;;
            CENTRAL)
              template='{{.spec.designateCentral.containerImage}}'
              ;;
            MDNS)
              template='{{.spec.designateMdns.containerImage}}'
              ;;
            PRODUCER)
              template='{{.spec.designateProducer.containerImage}}'
              ;;
            WORKER)
              template='{{.spec.designateWorker.containerImage}}'
              ;;
            BACKENDBIND9)
              template='{{.spec.designateBackendbind9.containerImage}}'
              ;;
            UNBOUND)
              template='{{.spec.designateUnbound.containerImage}}'
              ;;
          esac
          SERVICE_IMAGE=$(oc get -n $NAMESPACE designate designate -o go-template="$template")
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image does not equal $IMG_FROM_ENV (its current value is $SERVICE_IMAGE)"
            exit 1
          fi
        fi
      done
      exit 0
---
apiVersion: v1
kind: Service
metadata:
  name: designate-backendbind9-0
spec:
  ports:
    - name: named-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: named-udp
      port: 53
      protocol: UDP
      targetPort: 53
---
apiVersion: v1
kind: Service
metadata:
  name: designate-backendbind9-1
spec:
  ports:
    - name: named-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: named-udp
      port: 53
      protocol: UDP
      targetPort: 53
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: designate-backendbind9
spec:
  replicas: 2
